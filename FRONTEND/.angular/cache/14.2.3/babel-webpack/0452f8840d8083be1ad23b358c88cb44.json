{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { fromEvent, of } from 'rxjs';\nimport { map, distinctUntilChanged, debounceTime, switchMap, catchError } from 'rxjs/operators';\nimport { SearchService } from '../service/search.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/search.service\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"input\"];\n\nfunction SearchComponent_ul_7_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 10);\n    i0.ɵɵelement(1, \"img\", 11);\n    i0.ɵɵelementStart(2, \"div\", 12)(3, \"h5\", 13);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const user_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", user_r4.avatar_url, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(user_r4.login);\n  }\n}\n\nfunction SearchComponent_ul_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 8);\n    i0.ɵɵtemplate(1, SearchComponent_ul_7_li_1_Template, 5, 2, \"li\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const response_r2 = ctx.ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", response_r2.items);\n  }\n}\n\nexport class SearchComponent {\n  constructor(_service) {\n    this._service = _service;\n  }\n\n  ngAfterViewInit() {\n    this.searchField$ = fromEvent(this.input.nativeElement, `keyup`);\n    this.model = this.searchField$.pipe(map(event => event.target.value), debounceTime(300), distinctUntilChanged(), switchMap(term => this._service.search(term).pipe(catchError(() => {\n      return of([]);\n    }))));\n  }\n\n}\n\nSearchComponent.ɵfac = function SearchComponent_Factory(t) {\n  return new (t || SearchComponent)(i0.ɵɵdirectiveInject(i1.SearchService));\n};\n\nSearchComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SearchComponent,\n  selectors: [[\"app-search\"]],\n  viewQuery: function SearchComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.input = _t.first);\n    }\n  },\n  features: [i0.ɵɵProvidersFeature([SearchService])],\n  decls: 50,\n  vars: 3,\n  consts: [[1, \"form-group\"], [\"for\", \"github-search\"], [1, \"search\"], [\"id\", \"github-search\", \"type\", \"text\", \"placeholder\", \"GitHub Users\", 1, \"form-control\"], [\"input\", \"\"], [\"class\", \"list-unstyled\", 4, \"ngIf\"], [1, \"list-group\"], [1, \"list-group-item\"], [1, \"list-unstyled\"], [\"class\", \"media\", 4, \"ngFor\", \"ngForOf\"], [1, \"media\"], [\"alt\", \"user.login\", 1, \"mr-3\", 3, \"src\"], [1, \"media-body\"], [1, \"mt-0\", \"mb-1\"]],\n  template: function SearchComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"label\", 1);\n      i0.ɵɵtext(2, \"Search for GitHub Users:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵelement(4, \"input\", 3, 4);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(6, \"hr\");\n      i0.ɵɵtemplate(7, SearchComponent_ul_7_Template, 2, 1, \"ul\", 5);\n      i0.ɵɵpipe(8, \"async\");\n      i0.ɵɵelementStart(9, \"h1\");\n      i0.ɵɵtext(10, \" A Search example that gets Usernames and Avatars from the \");\n      i0.ɵɵelementStart(11, \"code\");\n      i0.ɵɵtext(12, \"GitHub\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"ul\", 6)(14, \"li\", 7);\n      i0.ɵɵtext(15, \" 1. \");\n      i0.ɵɵelementStart(16, \"code\");\n      i0.ɵɵtext(17, \"map\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(18, \" - To transform the \");\n      i0.ɵɵelementStart(19, \"code\");\n      i0.ɵɵtext(20, \"keyup\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(21, \" event into a text that could be used for the search. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"li\", 7);\n      i0.ɵɵtext(23, \" 2. \");\n      i0.ɵɵelementStart(24, \"code\");\n      i0.ɵɵtext(25, \"debounceTime\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(26, \" - To wait until x ms before doing something. So if the user changes anything within those x ms, it won't be accounted for. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"li\", 7);\n      i0.ɵɵtext(28, \" 3. \");\n      i0.ɵɵelementStart(29, \"code\");\n      i0.ɵɵtext(30, \"distinctUntilChanged\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(31, \" - To check if the value has actually changed within x ms. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(32, \"li\", 7);\n      i0.ɵɵtext(33, \" 4. \");\n      i0.ɵɵelementStart(34, \"code\");\n      i0.ɵɵtext(35, \"tap\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(36, \" - To set the loading state before actually making an API call. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(37, \"li\", 7);\n      i0.ɵɵtext(38, \" 5. \");\n      i0.ɵɵelementStart(39, \"code\");\n      i0.ɵɵtext(40, \"switchMap\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(41, \" - To switch the context of the Observable to the result of the \");\n      i0.ɵɵelementStart(42, \"code\");\n      i0.ɵɵtext(43, \"http.get\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(44, \" call. \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(45, \"li\", 7);\n      i0.ɵɵtext(46, \" 6. \");\n      i0.ɵɵelementStart(47, \"code\");\n      i0.ɵɵtext(48, \"catchError\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(49, \" - To handle the errors coming in from API, just in case there are any. \");\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(8, 1, ctx.model));\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i2.AsyncPipe],\n  styles: [\"p[_ngcontent-%COMP%] {\\r\\n    font-family: Lato;\\r\\n  }\\r\\n  \\r\\n  .mr-3[_ngcontent-%COMP%] {\\r\\n    width: 50px;\\r\\n    height: 50px;\\r\\n    border-radius: 50%;\\r\\n  }\\r\\n  \\r\\n  .media[_ngcontent-%COMP%] {\\r\\n    margin: 10px;\\r\\n  }\\r\\n  \\r\\n  .form-group[_ngcontent-%COMP%]\\r\\n{\\r\\n    margin: 10px;\\r\\n    \\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlYXJjaC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksaUJBQWlCO0VBQ25COztFQUVBO0lBQ0UsV0FBVztJQUNYLFlBQVk7SUFDWixrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxZQUFZO0VBQ2Q7O0VBRUY7O0lBRUksWUFBWTs7QUFFaEIiLCJmaWxlIjoic2VhcmNoLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJwIHtcclxuICAgIGZvbnQtZmFtaWx5OiBMYXRvO1xyXG4gIH1cclxuICBcclxuICAubXItMyB7XHJcbiAgICB3aWR0aDogNTBweDtcclxuICAgIGhlaWdodDogNTBweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICB9XHJcbiAgXHJcbiAgLm1lZGlhIHtcclxuICAgIG1hcmdpbjogMTBweDtcclxuICB9XHJcblxyXG4uZm9ybS1ncm91cFxyXG57XHJcbiAgICBtYXJnaW46IDEwcHg7XHJcbiAgICBcclxufSJdfQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAA2CA,UAA3C,QAA6D,eAA7D;AACA,SAAqBC,SAArB,EAAgCC,EAAhC,QAA0C,MAA1C;AAEA,SACEC,GADF,EAEEC,oBAFF,EAGEC,YAHF,EAKEC,SALF,EAMEC,UANF,QAOO,gBAPP;AAQA,SAASC,aAAT,QAA8B,2BAA9B;;;;;;;;ICSIC;IACEA;IACAA,gCAAwB,CAAxB,EAAwB,IAAxB,EAAwB,EAAxB;IACwBA;IAAgBA;;;;;IAFnCA;IAAAA;IAEmBA;IAAAA;;;;;;IAJ5BA;IACEA;IAMFA;;;;;IANqCA;IAAAA;;;;ADDvC,OAAM,MAAOC,eAAP,CAAsB;EAK1BC,YAAoBC,QAApB,EAA2C;IAAvB;EAA2B;;EAE/CC,eAAe;IACb,KAAKC,YAAL,GAAoBb,SAAS,CAAC,KAAKc,KAAL,CAAWC,aAAZ,EAA2B,OAA3B,CAA7B;IACA,KAAKC,KAAL,GAAa,KAAKH,YAAL,CAAkBI,IAAlB,CACXf,GAAG,CAAEgB,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAaC,KAAzB,CADQ,EAEXhB,YAAY,CAAC,GAAD,CAFD,EAGXD,oBAAoB,EAHT,EAKXE,SAAS,CAAEgB,IAAD,IACR,KAAKV,QAAL,CAAcW,MAAd,CAAqBD,IAArB,EAA2BJ,IAA3B,CACEX,UAAU,CAAC,MAAK;MACd,OAAOL,EAAE,CAAC,EAAD,CAAT;IACD,CAFS,CADZ,CADO,CALE,CAAb;EAaD;;AAtByB;;;mBAAfQ,iBAAeD;AAAA;;;QAAfC;EAAec;EAAAC;IAAA;;;;;;;;;;mCAFf,CAACjB,aAAD;EAAekB;EAAAC;EAAAC;EAAAC;IAAA;MClB5BpB,+BAAwB,CAAxB,EAAwB,OAAxB,EAAwB,CAAxB;MAC+BA;MAAwBA;MACnDA;MACIA;MAOJA;MAQFA;MAEAA;;MASAA;MACEA;MAA0DA;MAAMA;MAAMA;MAExEA,+BAAuB,EAAvB,EAAuB,IAAvB,EAAuB,CAAvB;MAEIA;MAAGA;MAAMA;MAAGA;MAAQA;MAAmBA;MAAMA;MAAKA;MAAQA;MAE5DA;MACAA;MACEA;MAAGA;MAAMA;MAAYA;MAAQA;MAE/BA;MACAA;MACEA;MAAGA;MAAMA;MAAoBA;MAAQA;MAEvCA;MACAA;MACEA;MAAGA;MAAMA;MAAGA;MAAQA;MAEtBA;MACAA;MACEA;MAAGA;MAAMA;MAASA;MAAQA;MACZA;MAAMA;MAAQA;MAAQA;MACtCA;MACAA;MACEA;MAAGA;MAAMA;MAAUA;MAAQA;MAE7BA;;;;MApCyBA;MAAAA","names":["ElementRef","fromEvent","of","map","distinctUntilChanged","debounceTime","switchMap","catchError","SearchService","i0","SearchComponent","constructor","_service","ngAfterViewInit","searchField$","input","nativeElement","model","pipe","event","target","value","term","search","selectors","viewQuery","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\Mansouri\\OneDrive\\Bureau\\EiCnam\\2A\\Web\\TP06\\tp06_mansouri_dalila\\FRONTEND\\src\\app\\search\\search.component.ts","C:\\Users\\Mansouri\\OneDrive\\Bureau\\EiCnam\\2A\\Web\\TP06\\tp06_mansouri_dalila\\FRONTEND\\src\\app\\search\\search.component.html"],"sourcesContent":["\nimport { Component, Injectable, ViewChild, ElementRef } from '@angular/core';\nimport { Observable, fromEvent, of } from 'rxjs';\n\nimport {\n  map,\n  distinctUntilChanged,\n  debounceTime,\n  tap,\n  switchMap,\n  catchError,\n} from 'rxjs/operators';\nimport { SearchService } from '../service/search.service';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.css'],\n  providers: [SearchService]\n})\nexport class SearchComponent{\n  model: Observable<any>;\n  searchField$: Observable<any>;\n  @ViewChild('input', { static: true }) input: ElementRef;\n\n  constructor(private _service: SearchService) {}\n\n  ngAfterViewInit() {\n    this.searchField$ = fromEvent(this.input.nativeElement, `keyup`);\n    this.model = this.searchField$.pipe(\n      map((event) => event.target.value),\n      debounceTime(300),\n      distinctUntilChanged(),\n\n      switchMap((term) =>\n        this._service.search(term).pipe(\n          catchError(() => {\n            return of([]);\n          })\n        )\n      )\n    );\n  }\n}","<div class=\"form-group\">\n    <label for=\"github-search\">Search for GitHub Users:</label>\n    <div class=\"search\">\n        <input\n        #input\n        id=\"github-search\"\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"GitHub Users\"\n      />\n    </div>\n    \n  \n    <!-- <div class=\"invalid-feedback\" *ngIf=\"searchFailed\">\n      Sorry, suggestions could not be loaded.\n    </div> -->\n  </div>\n  \n  <hr />\n  \n  <ul class=\"list-unstyled\" *ngIf=\"model | async as response\">\n    <li class=\"media\" *ngFor=\"let user of response.items\">\n      <img [src]=\"user.avatar_url\" class=\"mr-3\" alt=\"user.login\" />\n      <div class=\"media-body\">\n        <h5 class=\"mt-0 mb-1\">{{ user.login }}</h5>\n      </div>\n    </li>\n  </ul>\n  \n  <h1>\n    A Search example that gets Usernames and Avatars from the <code>GitHub</code>\n  </h1>\n  <ul class=\"list-group\">\n    <li class=\"list-group-item\">\n      1. <code>map</code> - To transform the <code>keyup</code> event into a text\n      that could be used for the search.\n    </li>\n    <li class=\"list-group-item\">\n      2. <code>debounceTime</code> - To wait until x ms before doing something. So\n      if the user changes anything within those x ms, it won't be accounted for.\n    </li>\n    <li class=\"list-group-item\">\n      3. <code>distinctUntilChanged</code> - To check if the value has actually\n      changed within x ms.\n    </li>\n    <li class=\"list-group-item\">\n      4. <code>tap</code> - To set the loading state before actually making an API\n      call.\n    </li>\n    <li class=\"list-group-item\">\n      5. <code>switchMap</code> - To switch the context of the Observable to the\n      result of the <code>http.get</code> call.\n    </li>\n    <li class=\"list-group-item\">\n      6. <code>catchError</code> - To handle the errors coming in from API, just\n      in case there are any.\n    </li>\n  </ul>\n  "]},"metadata":{},"sourceType":"module"}